


/*********************************************************/
/**         ALL FUNCTIONS ARE SAVED BELOW             **/
/*********************************************************/



/*********************************************************/
/**         ALL CLASSES ARE SAVED BELOW             **/
/*********************************************************/

       /*************************************
        ****  CLASS: Menu
        *************************************/

       /*************************************
        ****  CLASS: Image
        *************************************/

       /*************************************
        ****  CLASS: SlotView
        *************************************/

       /*************************************
        ****  CLASS: OutputView
        *************************************/

       /*************************************
        ****  CLASS: StateBox
        *************************************/

       /*************************************
        ****  CLASS: Meter
        *************************************/

       /*************************************
        ****  CLASS: InputOutputView
        *************************************/

       /*************************************
        ****  CLASS: ListBox
        *************************************/

       /*************************************
        ****  CLASS: SingleListBox
        *************************************/

       /*************************************
        ****  CLASS: ComboBox
        *************************************/

       /*************************************
        ****  CLASS: MultipleListBox
        *************************************/

       /*************************************
        ****  CLASS: Edit
        *************************************/

       /*************************************
        ****  CLASS: Slider
        *************************************/

       /*************************************
        ****  CLASS: CheckBox
        *************************************/

       /*************************************
        ****  CLASS: CheckBoxGroup
        *************************************/

       /*************************************
        ****  CLASS: RadioButtonGroup
        *************************************/

       /*************************************
        ****  CLASS: Button
        *************************************/

       /*************************************
        ****  CLASS: Text
        *************************************/

       /*************************************
        ****  CLASS: Transcript
        *************************************/

       /*************************************
        ****  CLASS: LinePlot
        *************************************/

       /*************************************
        ****  CLASS: Bitmap
        *************************************/

       /*************************************
        ****  CLASS: Drawing
        *************************************/

       /*************************************
        ****  CLASS: KWindow
        *************************************/

       /*************************************
        ****  CLASS: KSession
        *************************************/

       /*************************************
        ****  CLASS: Jugador
        *************************************/
MakeClass( Jugador, Root );
MakeSlot( Jugador:numero );
SetSlotOption( Jugador:numero, VALUE_TYPE, NUMBER );
SetSlotOption( Jugador:numero, MINIMUM_VALUE, 1 );
SetSlotOption( Jugador:numero, MAXIMUM_VALUE, 2 );
Jugador:numero = 1;
MakeSlot( Jugador:puntos );
SetSlotOption( Jugador:puntos, VALUE_TYPE, NUMBER );
SetSlotOption( Jugador:puntos, MINIMUM_VALUE, 0 );
SetSlotOption( Jugador:puntos, MAXIMUM_VALUE, 100 );
Jugador:puntos = 0;
MakeSlot( Jugador:cartas_emparejadas );
SetSlotOption( Jugador:cartas_emparejadas, VALUE_TYPE, NUMBER );
SetSlotOption( Jugador:cartas_emparejadas, MINIMUM_VALUE, 0 );
SetSlotOption( Jugador:cartas_emparejadas, MAXIMUM_VALUE, 7 );
Jugador:cartas_emparejadas = 0;
MakeSlot( Jugador:se_le_recomienda );
SetSlotOption( Jugador:se_le_recomienda, VALUE_TYPE, OBJECT );
SetSlotOption( Jugador:se_le_recomienda, ALLOWABLE_CLASSES, PJ );
MakeSlot( Jugador:posee );
SetSlotOption( Jugador:posee, MULTIPLE );
SetSlotOption( Jugador:posee, VALUE_TYPE, OBJECT );
SetSlotOption( Jugador:posee, ALLOWABLE_CLASSES, Carta );
ClearList( Jugador:posee );

       /*************************************
        ****  CLASS: Carta
        *************************************/
MakeClass( Carta, Root );
MakeSlot( Carta:palo );
SetSlotOption( Carta:palo, ALLOWABLE_VALUES, ORO, COPA, ESPADA, BASTO );
MakeSlot( Carta:valor );
SetSlotOption( Carta:valor, VALUE_TYPE, NUMBER );
SetSlotOption( Carta:valor, MINIMUM_VALUE, 1 );
SetSlotOption( Carta:valor, MAXIMUM_VALUE, 12 );
MakeSlot( Carta:prioridad );
SetSlotOption( Carta:prioridad, VALUE_TYPE, NUMBER );
SetSlotOption( Carta:prioridad, MINIMUM_VALUE, 1 );
SetSlotOption( Carta:prioridad, MAXIMUM_VALUE, 3 );
MakeSlot( Carta:ubicacion );
SetSlotOption( Carta:ubicacion, ALLOWABLE_VALUES, JUGADOR1, JUGADOR2, MAZO_LEVANTE, MAZO_DESCARTE );
MakeSlot( Carta:grupo );
SetSlotOption( Carta:grupo, MULTIPLE );
SetSlotOption( Carta:grupo, VALUE_TYPE, OBJECT );
SetSlotOption( Carta:grupo, ALLOWABLE_CLASSES, CARTA );
ClearList( Carta:grupo );

       /*************************************
        ****  CLASS: PJ
        *************************************/
MakeClass( PJ, Root );
MakeSlot( PJ:mazo );
SetSlotOption( PJ:mazo, ALLOWABLE_VALUES, MAZO_DESCARTE, MAZO_LEVANTE );
MakeSlot( PJ:carta );
SetSlotOption( PJ:carta, VALUE_TYPE, OBJECT );
SetSlotOption( PJ:carta, ALLOWABLE_CLASSES, Carta );
MakeSlot( PJ:cortar );
SetSlotOption( PJ:cortar, VALUE_TYPE, BOOLEAN );
MakeSlot( PJ:recomendado_a );
SetSlotOption( PJ:recomendado_a, VALUE_TYPE, OBJECT );
SetSlotOption( PJ:recomendado_a, ALLOWABLE_CLASSES, Jugador );



/*********************************************************/
/**         ALL INSTANCES ARE SAVED BELOW             **/
/*********************************************************/

       /*************************************
        ****  INSTANCE: SESSION
        *************************************/
SESSION:X = 21;
SESSION:Y = 121;
SESSION:Width = 465;
SESSION:Height = 220;
 ResetWindow (  SESSION  ); 

       /*************************************
        ****  INSTANCE: o7
        *************************************/
MakeInstance( o7, Carta );
o7:palo = oro;
o7:valor = 7;
o7:ubicacion = JUGADOR1;
SetValue( o7:grupo, b7, c7, b7 );

       /*************************************
        ****  INSTANCE: o5
        *************************************/
MakeInstance( o5, Carta );
o5:palo = oro;
o5:valor = 5;
o5:ubicacion = JUGADOR1;

       /*************************************
        ****  INSTANCE: o6
        *************************************/
MakeInstance( o6, Carta );
o6:palo = oro;
o6:valor = 6;
o6:ubicacion = JUGADOR1;

       /*************************************
        ****  INSTANCE: b7
        *************************************/
MakeInstance( b7, Carta );
b7:palo = basto;
b7:valor = 7;
b7:ubicacion = JUGADOR1;
SetValue( b7:grupo, o7, c7 );

       /*************************************
        ****  INSTANCE: c7
        *************************************/
MakeInstance( c7, Carta );
c7:palo = copa;
c7:valor = 7;
c7:ubicacion = JUGADOR1;
SetValue( c7:grupo, b7, o7 );

       /*************************************
        ****  INSTANCE: j
        *************************************/
MakeInstance( j, Jugador );
j:cartas_emparejadas = 3;

       /*************************************
        ****  INSTANCE: pj
        *************************************/
MakeInstance( pj, PJ );
pj:cortar = FALSE;



/*********************************************************/
/**         ALL RULES ARE SAVED BELOW             **/
/*********************************************************/

       /*************************************
        ****  RULE: R1
        *************************************/
MakeRule( R1, [jugador|Jugador carta|Carta pj|PJ],
    jugador:numero == 1 And jugador:cartas_emparejadas == 6 And
        carta:ubicacion #= JUGADOR1 And carta:valor > 5,
    pj:cortar = FALSE );

       /*************************************
        ****  RULE: R2
        *************************************/
MakeRule( R2, [jugador|Jugador pj|PJ],
    jugador:numero == 1 And jugador:cartas_emparejadas == 7,
    pj:cortar = TRUE );

       /*************************************
        ****  RULE: R3
        *************************************/
MakeRule( R3, [jugador|Jugador carta|Carta pj|PJ],
    jugador:numero == 1 And jugador:cartas_emparejadas == 6 And
        carta:valor <= 5 And carta:ubicacion #= JUGADOR1 And jugador:puntos
        + carta:valor > 100,
    pj:cortar = FALSE );

       /*************************************
        ****  RULE: R4
        *************************************/
MakeRule( R4, [jugador|Jugador pj|PJ],
    jugador:numero == 1 And jugador:cartas_emparejadas < 6,
    pj:cortar = FALSE );

       /*************************************
        ****  RULE: R5
        *************************************/
MakeRule( R5, [c1|Carta c2|Carta c3|Carta jugador|Jugador],
    c1:valor == c2:valor And c1:valor == c3:valor And Not( c1:palo
                                                               #=
                                                               c2:palo )
        And Not( c1:palo #= c3:palo ) And Not( c3:palo #= c2:palo )
        And c1:ubicacion #= JUGADOR1 And c2:ubicacion #= JUGADOR1
        And c3:ubicacion #= JUGADOR1,
    {
    jugador:cartas_emparejadas += 3;
    AppendToList( c1:grupo, c2 );
    AppendToList( c1:grupo, c3 );
    AppendToList( c2:grupo, c1 );
    AppendToList( c2:grupo, c3 );
    AppendToList( c3:grupo, c1 );
    AppendToList( c3:grupo, c2 );
    } );

       /*************************************
        ****  RULE: R6
        *************************************/
MakeRule( R6, [c1|Carta c2|Carta c3|Carta jugador|Jugador],
    c1:valor == ( c2:valor + 1 ) And c1:valor == ( c3:valor +
                                                       2 )
        And c1:palo #= c2:palo And c1:palo #= c3:palo And c3:palo
        #= c2:palo And c1:ubicacion #= JUGADOR1 And c2:ubicacion
        #= JUGADOR1 And c3:ubicacion #= JUGADOR1,
    {
    jugador:cartas_emparejadas += 3;
    AppendToList( c1:grupo, c2 );
    AppendToList( c1:grupo, c3 );
    AppendToList( c2:grupo, c1 );
    AppendToList( c2:grupo, c3 );
    AppendToList( c3:grupo, c1 );
    AppendToList( c3:grupo, c2 );
    } );


       /*************************************
        ****  RULE: R7
        *************************************/
MakeRule( R7, [c1|Carta c2|Carta c3|Carta c4|Carta jugador|Jugador],
        c1:ubicacion #= JUGADOR1 And c2:ubicacion #= JUGADOR1
        And c3:ubicacion #= JUGADOR1 And c4:ubicacion #= JUGADOR1 And
        c1:valor == c2:valor And c1:valor == c3:valor And c1:valor == c4:valor
        And Not( c1:palo #= c2:palo )
        And Not( c1:palo #= c3:palo ) 
        And Not( c1:palo #= c4:palo ) 
        And Not( c2:palo #= c3:palo ) 
        And Not( c2:palo #= c4:palo ) 
        And Not( c3:palo #= c4:palo ),
    {
    jugador:cartas_emparejadas += 3;
    AppendToList( c1:grupo, c2 );
    AppendToList( c1:grupo, c3 );
    AppendToList( c1:grupo, c4 );
    AppendToList( c2:grupo, c1 );
    AppendToList( c2:grupo, c3 );
    AppendToList( c2:grupo, c4 );
    AppendToList( c3:grupo, c1 );
    AppendToList( c3:grupo, c2 );
    AppendToList( c3:grupo, c4 );
    AppendToList( c4:grupo, c1 );
    AppendToList( c4:grupo, c2 );
    AppendToList( c4:grupo, c3 );
    } );

       /*************************************
        ****  RULE: R8
        *************************************/
MakeRule( R8, [c1|Carta c2|Carta c3|Carta c4|Carta jugador|Jugador],
        c1:valor == ( c2:valor + 1 ) And c1:valor == ( c3:valor + 2 ) And c1:valor == ( c4:valor + 3 )
        And c1:palo #= c2:palo And c1:palo #= c3:palo And c1:palo #= c4:palo
        And c1:ubicacion #= JUGADOR1 And c2:ubicacion
        #= JUGADOR1 And c3:ubicacion #= JUGADOR1 And c4:ubicacion #= JUGADOR1,
    {
    jugador:cartas_emparejadas += 3;
    AppendToList( c1:grupo, c2 );
    AppendToList( c1:grupo, c3 );
    AppendToList( c1:grupo, c4 );
    AppendToList( c2:grupo, c1 );
    AppendToList( c2:grupo, c3 );
    AppendToList( c2:grupo, c4 );
    AppendToList( c3:grupo, c1 );
    AppendToList( c3:grupo, c2 );
    AppendToList( c3:grupo, c4 );
    AppendToList( c4:grupo, c1 );
    AppendToList( c4:grupo, c2 );
    AppendToList( c4:grupo, c3 );
    } );

/*********************************************************/
/**         ALL GOALS ARE SAVED BELOW             **/
/*********************************************************/
